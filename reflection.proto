syntax = "proto3";

package cosmos.base.reflection.v1beta1;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/cosmos/cosmos-sdk/server/grpc/reflection/v1beta1";

// ReflectionService defines a comprehensive service for application reflection.
service ReflectionService {
  // Standard gRPC reflection
  rpc ServerReflectionInfo(stream ServerReflectionRequest) returns (stream ServerReflectionResponse);

  // Cosmos SDK custom reflection
  rpc ListAllInterfaces(ListAllInterfacesRequest) returns (ListAllInterfacesResponse) {
    option (google.api.http).get = "/cosmos/base/reflection/v1beta1/interfaces";
  }
  rpc ListImplementations(ListImplementationsRequest) returns (ListImplementationsResponse) {
    option (google.api.http).get = "/cosmos/base/reflection/v1beta1/interfaces/{interface_name}/implementations";
  }

  // Extended Cosmos SDK reflection (v2alpha1)
  rpc GetAuthnDescriptor(GetAuthnDescriptorRequest) returns (GetAuthnDescriptorResponse) {
    option (google.api.http).get = "/cosmos/base/reflection/v2alpha1/app_descriptor/authn";
  }
  rpc GetChainDescriptor(GetChainDescriptorRequest) returns (GetChainDescriptorResponse) {
    option (google.api.http).get = "/cosmos/base/reflection/v2alpha1/app_descriptor/chain";
  }
  rpc GetCodecDescriptor(GetCodecDescriptorRequest) returns (GetCodecDescriptorResponse) {
    option (google.api.http).get = "/cosmos/base/reflection/v2alpha1/app_descriptor/codec";
  }
  rpc GetConfigurationDescriptor(GetConfigurationDescriptorRequest) returns (GetConfigurationDescriptorResponse) {
    option (google.api.http).get = "/cosmos/base/reflection/v2alpha1/app_descriptor/configuration";
  }
  rpc GetQueryServicesDescriptor(GetQueryServicesDescriptorRequest) returns (GetQueryServicesDescriptorResponse) {
    option (google.api.http).get = "/cosmos/base/reflection/v2alpha1/app_descriptor/query_services";
  }
  rpc GetTxDescriptor(GetTxDescriptorRequest) returns (GetTxDescriptorResponse) {
    option (google.api.http).get = "/cosmos/base/reflection/v2alpha1/app_descriptor/tx_descriptor";
  }
}

// Standard gRPC reflection messages
message ServerReflectionRequest {
  string host = 1;
  oneof message_request {
    string file_by_filename = 3;
    string file_containing_symbol = 4;
    ExtensionRequest file_containing_extension = 5;
    string all_extension_numbers_of_type = 6;
    string list_services = 7;
  }
}

message ServerReflectionResponse {
  string valid_host = 1;
  ServerReflectionRequest original_request = 2;
  oneof message_response {
    FileDescriptorResponse file_descriptor_response = 4;
    ExtensionNumberResponse all_extension_numbers_response = 5;
    ListServiceResponse list_services_response = 6;
    ErrorResponse error_response = 7;
  }
}

message FileDescriptorResponse {
  repeated bytes file_descriptor_proto = 1;
}

message ExtensionNumberResponse {
  string base_type_name = 1;
  repeated int32 extension_number = 2;
}

message ListServiceResponse {
  repeated ServiceResponse service = 1;
}

message ServiceResponse {
  string name = 1;
}

message ErrorResponse {
  int32 error_code = 1;
  string error_message = 2;
}

message ExtensionRequest {
  string containing_type = 1;
  int32 extension_number = 2;
}

// Cosmos SDK custom reflection messages
message ListAllInterfacesRequest {}

message ListAllInterfacesResponse {
  repeated string interface_names = 1;
}

message ListImplementationsRequest {
  string interface_name = 1;
}

message ListImplementationsResponse {
  repeated string implementation_message_names = 1;
}

// Extended Cosmos SDK reflection messages (v2alpha1)
message GetAuthnDescriptorRequest {}

message GetAuthnDescriptorResponse {
  AuthnDescriptor authn = 1;
}

message GetChainDescriptorRequest {}

message GetChainDescriptorResponse {
  ChainDescriptor chain = 1;
}

message GetCodecDescriptorRequest {}

message GetCodecDescriptorResponse {
  CodecDescriptor codec = 1;
}

message GetConfigurationDescriptorRequest {}

message GetConfigurationDescriptorResponse {
  ConfigurationDescriptor config = 1;
}

message GetQueryServicesDescriptorRequest {}

message GetQueryServicesDescriptorResponse {
  QueryServicesDescriptor queries = 1;
}

message GetTxDescriptorRequest {}

message GetTxDescriptorResponse {
  TxDescriptor tx = 1;
}

// Descriptor messages
message AppDescriptor {
  AuthnDescriptor authn = 1;
  ChainDescriptor chain = 2;
  CodecDescriptor codec = 3;
  ConfigurationDescriptor configuration = 4;
  QueryServicesDescriptor query_services = 5;
  TxDescriptor tx = 6;
}

message TxDescriptor {
  string fullname = 1;
  repeated MsgDescriptor msgs = 2;
}

message AuthnDescriptor {
  repeated SigningModeDescriptor sign_modes = 1;
}

message SigningModeDescriptor {
  string name = 1;
  int32 number = 2;
  string authn_info_provider_method_fullname = 3;
}

message ChainDescriptor {
  string id = 1;
}

message CodecDescriptor {
  repeated InterfaceDescriptor interfaces = 1;
}

message InterfaceDescriptor {
  string fullname = 1;
  repeated InterfaceAcceptingMessageDescriptor interface_accepting_messages = 2;
  repeated InterfaceImplementerDescriptor interface_implementers = 3;
}

message InterfaceImplementerDescriptor {
  string fullname = 1;
  string type_url = 2;
}

message InterfaceAcceptingMessageDescriptor {
  string fullname = 1;
  repeated string field_descriptor_names = 2;
}

message ConfigurationDescriptor {
  string bech32_account_address_prefix = 1;
}

message MsgDescriptor {
  string msg_type_url = 1;
}

message QueryServicesDescriptor {
  repeated QueryServiceDescriptor query_services = 1;
}

message QueryServiceDescriptor {
  string fullname = 1;
  bool is_module = 2;
  repeated QueryMethodDescriptor methods = 3;
}

message QueryMethodDescriptor {
  string name = 1;
  string full_query_path = 2;
}
